import datetime, re
from fetch import FetchPost

####################################################################################################
def NormalizeURL(url):
    return url

####################################################################################################
def MetadataObjectForURL(url):
    object = GetObjectFromUrl(url)

    res = object.find("{urn:schemas-upnp-org:metadata-1-0/DIDL-Lite/}res")

    title = ''.join(object.find("{http://purl.org/dc/elements/1.1/}title").text)
    title = re.sub(res.get("parentTaskName") + " - ", "", title)

    return EpisodeObject(
        title = title,
        summary = object.find("{urn:schemas-upnp-org:metadata-1-0/DIDL-Lite/}description").text,
        originally_available_at = datetime.datetime.strptime(object.find("{urn:schemas-upnp-org:metadata-1-0/DIDL-Lite/}recordedStartDateTime").text, "%A %d %B %Y %I:%M %p").date(),
        show = res.get("parentTaskName"),
        source_title = "FetchTV",
        duration = Datetime.MillisecondsFromString(res.get("duration")),
        url = res.text
    )

####################################################################################################
def MediaObjectsForURL(url):
    res = GetObjectFromUrl(url).find("{urn:schemas-upnp-org:metadata-1-0/DIDL-Lite/}res")

    if (res.get("size") == "-1"):
        return []

    return [
        MediaObject(
            audio_codec = AudioCodec.AAC,
            video_codec = VideoCodec.H264,
            container = "mpegts",
            parts = [PartObject(key = RTMPVideoURL(url))],
        )
    ]

####################################################################################################
def GetObjectFromUrl(url):
    m = re.search('(\d+)$', url)
    data = FetchPost(m.group(1), "BrowseMetadata")
    return data.find("{urn:schemas-upnp-org:metadata-1-0/DIDL-Lite/}item")


